/* Reset básico */
*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

/* Estilos globales */
body {
    background: #f2f2f2;
    font-family: 'Roboto', sans-serif;
}

/* Caja de ejemplo */
.caja {
    background: #1062ff;
    color: #fff;
    padding: 40px;
    font-size: 24px;
    border-radius: 5px;
}

/* ==============================
   Contenedor principal (Flexbox)
   ============================== */
.contenedor {
    width: 90%;
    max-width: 1000px;
    margin: 40px auto;
    border: 4px solid #000;
    padding: 40px;

    display: flex;   /* Activa Flexbox */
    gap: 40px;       /* Espacio entre hijos */
}

/* ==============================
   Ejemplo con flex-basis
   ============================== */
.basis .caja {
    flex-basis: 150px; /* Tamaño base inicial */
}

.basis .especial {
    flex-basis: 300px; /* La caja especial arranca más grande */
}

/* ==============================
   Ejemplo con flex-grow
   ============================== */
.grow .caja {
    /* flex-basis: 200px;  tamaño base inicial */
    /* flex-grow: 1; cada caja ocupa 1 parte del espacio sobrante */
}

.grow .especial {
    flex-grow: 3; /* Esta crecerá 3 veces más que las demás */
}

/* ==============================
   Ejemplo con flex-shrink
   ============================== */
.basis .caja {
    flex-basis: 400px;
    flex-grow: 1;
    flex-shrink: 1;

    /* Equivalente a usar: flex: 1 1 400px; */
}

.basis .especial {
    flex-shrink: 3; /* Se encogerá 3 veces más que las demás si falta espacio */
}

/* ==============================
   Ejemplo con order
   ============================== */
/* Nota: order cambia el orden visual de los elementos en el contenedor */
.contenedor.order .caja.uno {
    order: 10;
    background: red;
}
/* ==============================
   PROPIEDAD: order
   ==============================
   - Cambia el orden visual de los elementos dentro de un contenedor flex.
   - Por defecto todos tienen order = 0.
   - Cuanto más pequeño el número → más adelante aparece el elemento.
   - No afecta el DOM real, solo el orden en pantalla.
*/
.order .caja.uno {
    order: 4;             /* Se renderiza de los últimos */
    background: red;
}

.order .caja.dos {
    order: 3;             /* Va después de los que tengan order menor */
    background: red;
}

.order .caja.tres {
    order: 2;             /* Más adelante que uno con order 1 */
    background: red;
}

.order .caja.cuatro {
    order: 1;             /* Este será el primero entre estos cuatro */
    background: red;
}

/* ==============================
   PROPIEDAD: align-self
   ==============================
   - Sobrescribe la propiedad align-items SOLO para un elemento específico.
   - Permite alinear un hijo distinto a los demás en el eje transversal.
   - Valores: stretch | flex-start | center | flex-end | baseline
   - Requiere que el contenedor tenga display: flex.
*/
.align-self {
    height: 700px;       /* Altura del contenedor para que se note la diferencia */
    align-items: start;  /* Los hijos, por defecto, se alinean arriba */
}

/* Cada caja puede sobrescribir con align-self */
.align-self .caja.uno {
    align-self: stretch; /* Ocupa toda la altura disponible */
}

.align-self .caja.dos {
    align-self: flex-start; /* Se mantiene arriba */
}

.align-self .caja.tres {
    align-self: center;  /* Se centra en el eje vertical */
}

.align-self .caja.cuatro {
    align-self: flex-end; /* Se va al fondo del contenedor */
}
