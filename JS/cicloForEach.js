/* ============================================
   M√âTODOS Y CICLOS PARA ITERACI√ìN
   ============================================
   
   üìå forEach():
   - M√âTODO de arrays para recorrer elementos
   - Recibe una funci√≥n callback
   - Par√°metros: (elemento, √≠ndice, array completo)
   
   üìå for...in:
   - CICLO para recorrer PROPIEDADES de un objeto
   - √ötil para objetos literales
   - Devuelve las CLAVES (keys)
   
   üìå for...of:
   - CICLO para recorrer VALORES de un iterable
   - Funciona con: Arrays, Strings, Maps, Sets, HTMLCollections
   - Devuelve los VALORES directamente
============================================ */


// ============================================
// 1. forEach() - M√©todo de Arrays
// ============================================
/* 
   SINTAXIS:
   array.forEach((elemento, indice, arrayCompleto) => {
       // c√≥digo a ejecutar
   });
   
   PAR√ÅMETROS:
   - elemento: El valor actual que se est√° recorriendo
   - indice: La posici√≥n del elemento (opcional)
   - arrayCompleto: El array completo (opcional)
   
   ‚ö†Ô∏è IMPORTANTE: forEach() NO retorna un nuevo array
                   Solo ejecuta una funci√≥n por cada elemento
*/

console.log('--- forEach() ---');
console.log('Recorriendo array de amigos:\n');

const amigos = ['Dan', 'Cesar', 'Manuel'];

// Versi√≥n corta (una l√≠nea)
amigos.forEach((amigo, index) => console.log(`Mi amigo #${index} es ${amigo}`));

// Versi√≥n expandida (para ver mejor los par√°metros)
console.log('\nVersiones con diferentes par√°metros:');

// Solo el elemento
amigos.forEach((amigo) => {
    console.log('Amigo:', amigo);
});

// Elemento e √≠ndice
amigos.forEach((amigo, index) => {
    console.log(`Posici√≥n ${index}: ${amigo}`);
});

// Elemento, √≠ndice y array completo
amigos.forEach((amigo, index, arrayCompleto) => {
    console.log(`${amigo} est√° en posici√≥n ${index} de ${arrayCompleto.length} elementos`);
});

console.log('');


// ============================================
// 2. for...in - Recorrer PROPIEDADES de Objetos
// ============================================
/* 
   SINTAXIS:
   for (variable in objeto) {
       // c√≥digo a ejecutar
   }
   
   ‚ö†Ô∏è IMPORTANTE: 
   - for...in devuelve las CLAVES (keys), no los valores
   - Para acceder al valor: objeto[clave]
   - Se usa principalmente con OBJETOS LITERALES
*/

console.log('--- for...in ---');
console.log('Recorriendo propiedades de un objeto:\n');

const persona = {
    nombre: 'Dan',
    edad: 32,
    email: 'email@email.com'
};

console.log('Objeto original:', persona);
console.log('\nRecorriendo con for...in:');

// 'propiedad' contiene el NOMBRE de cada propiedad (clave)
for (propiedad in persona) {
    console.log(`Propiedad: ${propiedad}`);
    console.log(`Valor: ${persona[propiedad]}`);      // Acceder al valor con []
    console.log('---');

    // Modificando el valor de cada propiedad
    persona[propiedad] = ' ';                         // Limpia todos los valores
}

console.log('\nObjeto despu√©s de limpiarlo:', persona);
console.log('');


// ============================================
// 3. for...of - Recorrer VALORES de Iterables
// ============================================
/* 
   SINTAXIS:
   for (variable of iterable) {
       // c√≥digo a ejecutar
   }
   
   ‚ö†Ô∏è IMPORTANTE:
   - for...of devuelve los VALORES directamente
   - Funciona con: Arrays, Strings, Maps, Sets, HTMLCollections
   - NO funciona con objetos literales normales
*/

console.log('--- for...of ---');
console.log('Recorriendo HTMLCollection del DOM:\n');

const etiquetas = document.head.children;              // HTMLCollection (similar a array)
console.log('Tipo de dato:', etiquetas);
console.log('N√∫mero de etiquetas:', etiquetas.length);
console.log('\nRecorriendo con for...of:');

// 'elemento' contiene directamente cada elemento HTML
for (elemento of etiquetas) {
    console.log(elemento);                             // Imprime el elemento HTML completo
    console.log('Tag:', elemento.tagName);             // Nombre de la etiqueta (META, TITLE, etc.)
}

console.log('');


// ============================================
// 4. Convertir HTMLCollection a Array
// ============================================
/* 
   PROBLEMA: HTMLCollection NO es un array real
             NO tiene m√©todos como forEach(), map(), filter()
   
   SOLUCI√ìN: Convertirlo a array con Spread Operator (...)
   
   VENTAJA: Ahora podemos usar todos los m√©todos de arrays
*/

console.log('--- Spread Operator + forEach ---');
console.log('Convirtiendo HTMLCollection a Array:\n');

// Spread operator copia la colecci√≥n HTML y la convierte en array
const etiquetasArray = [...etiquetas];
console.log('Es un array ahora:', Array.isArray(etiquetasArray));

// Ahora S√ç podemos usar forEach porque es un array
etiquetasArray.forEach((etiqueta) => {
    console.log('Etiqueta:', etiqueta.tagName);
});

// Versi√≥n de una l√≠nea (la del c√≥digo original)
console.log('\nVersioni√≥n corta:');
[...etiquetas].forEach((etiqueta) => console.log(etiqueta));

console.log('');


// ============================================
// COMPARACI√ìN: for...in vs for...of
// ============================================
console.log('--- COMPARACI√ìN: for...in vs for...of ---');
console.log(`
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ for...in     ‚îÇ for...of                                ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Recorre      ‚îÇ Recorre                                 ‚îÇ
‚îÇ PROPIEDADES  ‚îÇ VALORES                                 ‚îÇ
‚îÇ (claves)     ‚îÇ                                         ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Para OBJETOS ‚îÇ Para ITERABLES                          ‚îÇ
‚îÇ              ‚îÇ (arrays, strings, etc.)                 ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Devuelve     ‚îÇ Devuelve                                ‚îÇ
‚îÇ la CLAVE     ‚îÇ el VALOR directamente                   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
`);

// EJEMPLO PR√ÅCTICO
const colores = ['rojo', 'verde', 'azul'];
const coche = { marca: 'Toyota', modelo: 'Corolla', a√±o: 2020 };

console.log('\nEjemplo con array:');
console.log('for...in (√≠ndices):', 'devuelve ‚Üí', Object.keys(colores).join(', '));
for (let i in colores) {
    console.log(`√çndice: ${i}, Valor: ${colores[i]}`);
}

console.log('\nfor...of (valores):');
for (let color of colores) {
    console.log(`Valor directo: ${color}`);
}

console.log('\nEjemplo con objeto:');
console.log('for...in (propiedades):');
for (let prop in coche) {
    console.log(`Propiedad: ${prop}, Valor: ${coche[prop]}`);
}

// ‚ö†Ô∏è for...of NO funciona con objetos literales
// for (let valor of coche) { ... }  ‚Üê Esto dar√≠a ERROR
console.log('\n‚ö†Ô∏è for...of NO funciona con objetos literales (dar√≠a error)');
console.log('');


// ============================================
// CASOS DE USO COMUNES
// ============================================
console.log('--- CASOS DE USO ---');
console.log(`
‚úÖ forEach():
   - Recorrer arrays
   - Ejecutar funci√≥n por cada elemento
   - No retorna nuevo array
   Ejemplo: usuarios.forEach(user => console.log(user.nombre))

‚úÖ for...in:
   - Recorrer propiedades de objetos
   - Modificar valores de objetos
   - Obtener claves de objetos
   Ejemplo: for (key in config) { config[key] = default }

‚úÖ for...of:
   - Recorrer valores de arrays
   - Procesar elementos del DOM
   - Iterar strings, Maps, Sets
   Ejemplo: for (let item of carrito) { calcularTotal(item) }

‚ö†Ô∏è Conversi√≥n con Spread:
   - Convertir HTMLCollection/NodeList a array
   - Poder usar m√©todos de arrays (map, filter, etc.)
   Ejemplo: [...elementos].map(el => el.textContent)
`);


// ============================================
// EJEMPLOS ADICIONALES
// ============================================
console.log('--- EJEMPLOS ADICIONALES ---');

// forEach con arrays de objetos
console.log('\nforEach con objetos:');
const productos = [
    { nombre: 'Laptop', precio: 1000 },
    { nombre: 'Mouse', precio: 25 },
    { nombre: 'Teclado', precio: 75 }
];

productos.forEach((producto, index) => {
    console.log(`${index + 1}. ${producto.nombre}: $${producto.precio}`);
});

// for...of con strings
console.log('\nfor...of con strings:');
const palabra = 'JavaScript';
for (let letra of palabra) {
    console.log(letra);
}

// for...in para copiar objeto
console.log('\nfor...in para copiar objeto:');
const original = { a: 1, b: 2, c: 3 };
const copia = {};
for (let key in original) {
    copia[key] = original[key];
}
console.log('Original:', original);
console.log('Copia:', copia);
console.log('');


// ============================================
// RESUMEN
// ============================================
console.log('--- RESUMEN ---');
console.log(`
‚úÖ forEach():
   - M√©todo de ARRAYS
   - Par√°metros: (elemento, √≠ndice, arrayCompleto)
   - No retorna nada
   - Uso: Ejecutar funci√≥n por cada elemento

‚úÖ for...in:
   - Ciclo para OBJETOS
   - Devuelve CLAVES (propiedades)
   - Acceso a valor: objeto[clave]
   - Uso: Recorrer propiedades de objetos

‚úÖ for...of:
   - Ciclo para ITERABLES
   - Devuelve VALORES directamente
   - Funciona con: Arrays, Strings, Maps, Sets, HTMLCollections
   - Uso: Recorrer valores de colecciones

‚ö†Ô∏è IMPORTANTE:
   - forEach: Solo arrays
   - for...in: Objetos (devuelve claves)
   - for...of: Iterables (devuelve valores)
   - HTMLCollection ‚Üí Convertir a array con [...coleccion]
`);