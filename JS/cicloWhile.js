/* ============================================
   CICLOS WHILE y DO-WHILE
   ============================================
   
   üìå WHILE:
   - Eval√∫a la condici√≥n ANTES de ejecutar el c√≥digo
   - Si la condici√≥n es false desde el inicio, NO se ejecuta ni una vez
   - M√°s simple que FOR (solo necesita una condici√≥n)
   
   üìå DO-WHILE:
   - Ejecuta el c√≥digo PRIMERO, luego eval√∫a la condici√≥n
   - Se ejecuta AL MENOS UNA VEZ (incluso si la condici√≥n es false)
   - √ötil cuando necesitas que el c√≥digo se ejecute m√≠nimo una vez
============================================ */


// ============================================
// 1. CICLO WHILE
// ============================================
/* 
   ESTRUCTURA:
   while (condici√≥n) {
       // c√≥digo a ejecutar
       // actualizaci√≥n del contador
   }
   
   ‚ö†Ô∏è IMPORTANTE: Debes actualizar el contador manualmente
                   o el ciclo ser√° INFINITO
*/

console.log('--- CICLO WHILE ---');
console.log('Contando del 0 al 10:\n');

let contador = 0;                // 1. Inicializaci√≥n (antes del ciclo)
while (contador <= 10) {         // 2. Condici√≥n (se eval√∫a ANTES de cada iteraci√≥n)
    console.log(contador);       // 3. C√≥digo a ejecutar
    contador++;                  // 4. Actualizaci√≥n (IMPORTANTE para evitar ciclo infinito)
}

console.log('Ciclo terminado. Contador final:', contador);
console.log('');


// ============================================
// 2. CICLO DO-WHILE
// ============================================
/* 
   ESTRUCTURA:
   do {
       // c√≥digo a ejecutar
       // actualizaci√≥n del contador
   } while (condici√≥n);
   
   ‚ö†Ô∏è DIFERENCIA CLAVE: El c√≥digo se ejecuta PRIMERO,
                        luego se eval√∫a la condici√≥n
*/

console.log('--- CICLO DO-WHILE ---');
console.log('Intentando contar del 100 al 10:\n');

let i = 100;                     // Inicializaci√≥n: i = 100
do {
    console.log(i);              // Se ejecuta PRIMERO (imprime 100)
    i++;                         // i pasa a ser 101
} while (i <= 10);               // Luego eval√∫a: ¬ø101 <= 10? ‚Üí false

console.log('Ciclo terminado. Valor de i:', i);
console.log('‚ö†Ô∏è Nota: Se ejecut√≥ UNA vez aunque la condici√≥n era falsa desde el inicio');
console.log('');


// ============================================
// COMPARACI√ìN: WHILE vs DO-WHILE
// ============================================
console.log('--- COMPARACI√ìN ---');
console.log(`
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ WHILE           ‚îÇ DO-WHILE                            ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Eval√∫a ANTES    ‚îÇ Eval√∫a DESPU√âS                      ‚îÇ
‚îÇ de ejecutar     ‚îÇ de ejecutar                         ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Puede NO        ‚îÇ Se ejecuta AL MENOS                 ‚îÇ
‚îÇ ejecutarse      ‚îÇ UNA VEZ                             ‚îÇ
‚îÇ ninguna vez     ‚îÇ                                     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ while (cond) {  ‚îÇ do {                                ‚îÇ
‚îÇ   c√≥digo        ‚îÇ   c√≥digo                            ‚îÇ
‚îÇ }               ‚îÇ } while (cond);                     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
`);


// ============================================
// EJEMPLO PR√ÅCTICO: Diferencia clave
// ============================================
console.log('--- EJEMPLO DE LA DIFERENCIA ---');

// WHILE: No se ejecuta si la condici√≥n es false desde el inicio
console.log('\nWHILE con condici√≥n falsa desde el inicio:');
let x = 10;
while (x < 5) {
    console.log('Este mensaje NO aparecer√°');
    x++;
}
console.log('‚úÖ WHILE no se ejecut√≥ porque x=10 no cumple x<5');

// DO-WHILE: Se ejecuta UNA vez aunque la condici√≥n sea false
console.log('\nDO-WHILE con condici√≥n falsa desde el inicio:');
let y = 10;
do {
    console.log('‚ö†Ô∏è Este mensaje S√ç aparece (y =', y + ')');
    y++;
} while (y < 5);
console.log('‚úÖ DO-WHILE se ejecut√≥ UNA vez antes de evaluar la condici√≥n');
console.log('');


// ============================================
// COMPARACI√ìN: WHILE vs FOR
// ============================================
console.log('--- WHILE vs FOR ---');
console.log(`
WHILE:
  - Solo tiene condici√≥n
  - M√°s flexible
  - √ötil cuando no sabes cu√°ntas iteraciones necesitas
  - Ejemplo: while (usuario !== "salir")

FOR:
  - Tiene inicializaci√≥n, condici√≥n y actualizaci√≥n juntas
  - M√°s compacto
  - √ötil cuando sabes cu√°ntas iteraciones necesitas
  - Ejemplo: for (let i = 0; i < 10; i++)
`);


// ============================================
// CASOS DE USO
// ============================================
console.log('--- CASOS DE USO ---');

// WHILE: Men√∫ que se repite hasta que el usuario elija salir
console.log('\nEjemplo WHILE - Procesamiento hasta cumplir condici√≥n:');
let numero = 1;
let suma = 0;
while (suma < 100) {
    suma += numero;
    console.log(`Sumando ${numero}: suma total = ${suma}`);
    numero++;
}
console.log('‚úÖ Total alcanzado:', suma);

// DO-WHILE: Pedir datos al usuario (debe ejecutarse al menos una vez)
console.log('\nEjemplo DO-WHILE - Validaci√≥n que debe ejecutarse m√≠nimo una vez:');
let intento = 0;
let numeroSecreto = 7;
let numeroUsuario;

do {
    intento++;
    numeroUsuario = Math.floor(Math.random() * 10) + 1; // Simulando entrada de usuario
    console.log(`Intento ${intento}: Usuario ingres√≥ ${numeroUsuario}`);

    if (numeroUsuario === numeroSecreto) {
        console.log('üéâ ¬°Correcto!');
    } else {
        console.log('‚ùå Incorrecto, intenta de nuevo');
    }
} while (numeroUsuario !== numeroSecreto);

console.log('‚úÖ Juego terminado en', intento, 'intentos');
console.log('');


// ============================================
// ADVERTENCIA: CICLOS INFINITOS
// ============================================
console.log('--- ‚ö†Ô∏è CUIDADO CON CICLOS INFINITOS ---');
console.log(`
‚ùå CICLO INFINITO (NO EJECUTAR):

let contador = 0;
while (contador < 10) {
    console.log(contador);
    // ‚ö†Ô∏è OLVIDASTE contador++ 
    // El ciclo NUNCA termina porque contador siempre ser√° 0
}

‚úÖ SOLUCI√ìN:
Siempre actualiza tu contador/condici√≥n dentro del ciclo:

let contador = 0;
while (contador < 10) {
    console.log(contador);
    contador++;  // ‚Üê IMPORTANTE
}
`);


// ============================================
// RESUMEN
// ============================================
console.log('--- RESUMEN ---');
console.log(`
‚úÖ WHILE:
   - Eval√∫a condici√≥n ANTES
   - Puede NO ejecutarse
   - Uso: Cuando no sabes cu√°ntas iteraciones necesitas
   - Ejemplo: while (hayDatos) { procesar() }

‚úÖ DO-WHILE:
   - Eval√∫a condici√≥n DESPU√âS
   - Se ejecuta AL MENOS UNA VEZ
   - Uso: Men√∫s, validaciones que deben ejecutarse m√≠nimo una vez
   - Ejemplo: do { pedirOpcion() } while (opcion !== "salir")

‚úÖ FOR:
   - Todo junto (inicializaci√≥n, condici√≥n, actualizaci√≥n)
   - M√°s estructurado
   - Uso: Cuando sabes cu√°ntas iteraciones necesitas
   - Ejemplo: for (let i = 0; i < 10; i++) { ... }

‚ö†Ô∏è IMPORTANTE:
   - SIEMPRE actualiza el contador en WHILE/DO-WHILE
   - Sin actualizaci√≥n = CICLO INFINITO ‚ôæÔ∏è
   - DO-WHILE termina con punto y coma (;)
`);