/* ============================================
   EXPRESIONES REGULARES (RegEx)
   ============================================
   
   Archivo de estudio para entender las expresiones
   regulares en JavaScript, sus patrones, m√©todos
   y casos de uso pr√°cticos en front-end.
   
   üìå RegEx = Patrones para buscar/validar texto
============================================ */


// ============================================
// 1. ¬øQU√â ES UNA EXPRESI√ìN REGULAR?
// ============================================

console.log('--- ¬øQU√â ES REGEX? ---');
console.log(`
EXPRESI√ìN REGULAR (RegEx):
- Patr√≥n para buscar, validar o manipular texto
- Muy √∫til en front-end para validar formularios
- Se usa con strings en JavaScript

SINTAXIS:
/patron/banderas

EJEMPLOS:
/abc/        ‚Üí Busca "abc"
/\d+/        ‚Üí Busca uno o m√°s d√≠gitos
/[a-z]/i     ‚Üí Busca letras (case-insensitive)
`);

console.log('');


// ============================================
// 2. CREAR EXPRESIONES REGULARES
// ============================================

console.log('--- CREAR REGEX ---');

// Forma 1: Literal (m√°s com√∫n)
const regex1 = /hola/
console.log('Literal:', regex1)  // /hola/
console.log('Tipo:', typeof regex1)  // "object"

// Forma 2: Constructor
const regex2 = new RegExp('hola')
console.log('Constructor:', regex2)  // /hola/

// Con variables (solo con constructor)
const patron = 'mundo'
const regex3 = new RegExp(patron)
console.log('Con variable:', regex3)  // /mundo/

console.log('');


// ============================================
// 3. BANDERAS (FLAGS)
// ============================================

console.log('--- BANDERAS ---');
console.log(`
BANDERAS PRINCIPALES:

g - global: Busca TODAS las coincidencias (no solo la primera)
i - ignore case: Ignora may√∫sculas/min√∫sculas
m - multiline: ^ y $ funcionan por l√≠nea

OTRAS BANDERAS:
s - dotAll: . tambi√©n coincide con saltos de l√≠nea
u - unicode: Soporte completo para Unicode
y - sticky: Busca desde lastIndex
`);

const texto = 'Hola Mundo HOLA mundo'

// Sin banderas (solo primera, case-sensitive)
console.log('Sin banderas:', texto.match(/hola/))  // ["Hola"]

// Con 'g' (global - todas, case-sensitive)
console.log('Con g:', texto.match(/hola/g))  // ["ola"]

// Con 'i' (case-insensitive)
console.log('Con i:', texto.match(/hola/i))  // ["Hola"]

// Con 'gi' (global + case-insensitive)
console.log('Con gi:', texto.match(/hola/gi))  // ["Hola", "HOLA"]

console.log('');


// ============================================
// 4. M√âTODOS PRINCIPALES
// ============================================

console.log('--- M√âTODOS PRINCIPALES ---');

const texto1 = 'Hola mundo, hola JavaScript'
const regex = /hola/gi

// 1. test() - Verifica si existe (retorna true/false)
console.log('test():', regex.test(texto1))  // true

// 2. exec() - Extrae informaci√≥n detallada
const resultado = /hola/i.exec(texto1)
console.log('exec():', resultado)  // ["Hola", index: 0, ...]

// 3. match() - M√©todo de String, extrae coincidencias
console.log('match():', texto1.match(/hola/gi))  // ["Hola", "hola"]

// 4. search() - M√©todo de String, retorna √≠ndice
console.log('search():', texto1.search(/mundo/))  // 5

// 5. replace() - M√©todo de String, reemplaza texto
console.log('replace():', texto1.replace(/hola/gi, 'adi√≥s'))
// "adi√≥s mundo, adi√≥s JavaScript"

// 6. split() - M√©todo de String, divide por patr√≥n
const texto2 = 'uno,dos;tres:cuatro'
console.log('split():', texto2.split(/[,;:]/))
// ["uno", "dos", "tres", "cuatro"]

console.log('');


// ============================================
// 5. CARACTERES ESPECIALES
// ============================================

console.log('--- CARACTERES ESPECIALES ---');
console.log(`
METACARACTERES:

.  ‚Üí Cualquier caracter (excepto salto de l√≠nea)
\\d ‚Üí D√≠gito (0-9)
\\D ‚Üí No d√≠gito
\\w ‚Üí Alfanum√©rico (a-z, A-Z, 0-9, _)
\\W ‚Üí No alfanum√©rico
\\s ‚Üí Espacio en blanco (espacio, tab, salto)
\\S ‚Üí No espacio en blanco
\\b ‚Üí L√≠mite de palabra
\\B ‚Üí No l√≠mite de palabra

ESCAPAR CARACTERES ESPECIALES:
\\. \\* \\+ \\? \\[ \\] \\{ \\} \\( \\) \\^ \\$ \\| \\\\
`);

// Ejemplos
console.log('Ejemplos de caracteres especiales:');
console.log('D√≠gitos:', 'Tengo 25 a√±os'.match(/\d+/g))  // ["25"]
console.log('Alfanum√©ricos:', 'abc_123'.match(/\w+/))  // ["abc_123"]
console.log('Espacios:', 'hola mundo'.match(/\s/g))  // [" "]

// Escapar punto literal
console.log('Punto literal:', 'archivo.txt'.match(/\./))  // ["."]
console.log('Cualquier caracter:', 'archivo.txt'.match(/./g))  // ["a","r","c",...]

console.log('');


// ============================================
// 6. CUANTIFICADORES
// ============================================

console.log('--- CUANTIFICADORES ---');
console.log(`
CUANTIFICADORES:

*  ‚Üí 0 o m√°s veces
+  ‚Üí 1 o m√°s veces
?  ‚Üí 0 o 1 vez (opcional)
{n}   ‚Üí Exactamente n veces
{n,}  ‚Üí n o m√°s veces
{n,m} ‚Üí Entre n y m veces

EJEMPLOS:
/a*/     ‚Üí "", "a", "aa", "aaa"
/a+/     ‚Üí "a", "aa", "aaa" (al menos uno)
/a?/     ‚Üí "", "a" (opcional)
/a{3}/   ‚Üí "aaa" (exactamente 3)
/a{2,4}/ ‚Üí "aa", "aaa", "aaaa"
`);

// Ejemplos pr√°cticos
const texto3 = 'goool gol goooool'
console.log('o* (0 o m√°s):', texto3.match(/go*l/g))  // ["gol", "gol", "gol"]
console.log('o+ (1 o m√°s):', texto3.match(/go+l/g))  // ["goool", "gol", "goooool"]
console.log('o{2} (exactamente 2):', texto3.match(/go{2}l/g))  // ["gool"]
console.log('o{2,4} (entre 2 y 4):', texto3.match(/go{2,4}l/g))  // ["goool"]

// Validar formato
const telefono = '555-1234'
console.log('Tel√©fono v√°lido:', /\d{3}-\d{4}/.test(telefono))  // true

console.log('');


// ============================================
// 7. CLASES DE CARACTERES
// ============================================

console.log('--- CLASES DE CARACTERES ---');
console.log(`
CLASES DE CARACTERES:

[abc]   ‚Üí a, b, o c
[^abc]  ‚Üí Cualquiera EXCEPTO a, b, c
[a-z]   ‚Üí Letras min√∫sculas
[A-Z]   ‚Üí Letras may√∫sculas
[0-9]   ‚Üí D√≠gitos
[a-zA-Z] ‚Üí Letras (may√∫sculas y min√∫sculas)
[a-zA-Z0-9] ‚Üí Alfanum√©ricos

EJEMPLOS:
[aeiou]     ‚Üí Vocales
[^aeiou]    ‚Üí Consonantes
[0-9a-f]    ‚Üí D√≠gitos hexadecimales
`);

// Ejemplos
const texto4 = 'Hola123'
console.log('Solo letras:', texto4.match(/[a-zA-Z]+/g))  // ["Hola"]
console.log('Solo n√∫meros:', texto4.match(/[0-9]+/g))  // ["123"]
console.log('Vocales:', texto4.match(/[aeiou]/gi))  // ["o", "a"]

// Validar c√≥digo hexadecimal
const color = '#FF5733'
console.log('Color hex v√°lido:', /^#[0-9A-Fa-f]{6}$/.test(color))  // true

console.log('');


// ============================================
// 8. ANCLAS Y L√çMITES
// ============================================

console.log('--- ANCLAS Y L√çMITES ---');
console.log(`
ANCLAS:

^  ‚Üí Inicio de string (o l√≠nea con flag m)
$  ‚Üí Final de string (o l√≠nea con flag m)
\\b ‚Üí L√≠mite de palabra
\\B ‚Üí No l√≠mite de palabra

EJEMPLOS:
/^Hola/   ‚Üí String que EMPIEZA con "Hola"
/mundo$/  ‚Üí String que TERMINA con "mundo"
/\\bcat\\b/ ‚Üí Palabra completa "cat"
`);

// Ejemplos
console.log('Empieza con "Hola":', /^Hola/.test('Hola mundo'))  // true
console.log('Empieza con "Hola":', /^Hola/.test('Adi√≥s Hola'))  // false

console.log('Termina con "mundo":', /mundo$/.test('Hola mundo'))  // true
console.log('Termina con "mundo":', /mundo$/.test('mundo Hola'))  // false

// L√≠mite de palabra
const texto5 = 'cat catch scattered'
console.log('Palabra completa "cat":', texto5.match(/\bcat\b/g))  // ["cat"]
console.log('Contiene "cat":', texto5.match(/cat/g))  // ["cat", "cat", "cat"]

console.log('');


// ============================================
// 9. GRUPOS Y CAPTURA
// ============================================

console.log('--- GRUPOS Y CAPTURA ---');
console.log(`
GRUPOS:

(abc)     ‚Üí Grupo de captura
(?:abc)   ‚Üí Grupo sin captura
(a|b)     ‚Üí Alternancia (a O b)

EJEMPLOS:
/(\\d{3})-(\\d{4})/  ‚Üí Captura c√≥digo de √°rea y n√∫mero
/(?:http|https):\\/\\// ‚Üí http:// o https:// sin captura
`);

// Grupo de captura
const email = 'Contacto: dan@email.com'
const regex4 = /(\w+)@(\w+\.\w+)/
const resultado2 = email.match(regex4)

console.log('Email completo:', resultado2[0])  // "dan@email.com"
console.log('Usuario:', resultado2[1])  // "dan"
console.log('Dominio:', resultado2[2])  // "email.com"

// Alternancia
const texto6 = 'Me gusta JavaScript y Python'
console.log('Lenguajes:', texto6.match(/JavaScript|Python|Java/g))
// ["JavaScript", "Python"]

// Grupo sin captura (m√°s eficiente)
const url = 'https://example.com'
console.log('URL v√°lida:', /^(?:http|https):\/\//.test(url))  // true

console.log('');


// ============================================
// 10. LOOKAHEAD Y LOOKBEHIND
// ============================================

console.log('--- LOOKAHEAD Y LOOKBEHIND ---');
console.log(`
LOOKAHEAD (mirar adelante):

(?=...)   ‚Üí Lookahead positivo (debe seguir)
(?!...)   ‚Üí Lookahead negativo (no debe seguir)

LOOKBEHIND (mirar atr√°s):

(?<=...)  ‚Üí Lookbehind positivo (debe preceder)
(?<!...)  ‚Üí Lookbehind negativo (no debe preceder)

EJEMPLOS:
/\\d(?= pesos)/     ‚Üí N√∫mero seguido de " pesos"
/\\d(?! pesos)/     ‚Üí N√∫mero NO seguido de " pesos"
/(?<=\\$)\\d+/      ‚Üí N√∫mero precedido por $
/(?<!\\$)\\d+/      ‚Üí N√∫mero NO precedido por $
`);

// Lookahead positivo
const texto7 = 'Tengo 100 pesos y 50 d√≥lares'
console.log('N√∫mero antes de "pesos":', texto7.match(/\d+(?= pesos)/))  // ["100"]

// Lookahead negativo
console.log('N√∫mero NO antes de "pesos":', texto7.match(/\d+(?! pesos)/g))  // ["10", "5"]

// Lookbehind positivo
const texto8 = 'Precio: $100 y 50 unidades'
console.log('N√∫mero despu√©s de $:', texto8.match(/(?<=\$)\d+/))  // ["100"]

console.log('');


// ============================================
// 11. VALIDACIONES COMUNES EN FRONT-END
// ============================================

console.log('--- VALIDACIONES COMUNES ---');

// 1. Validar email
function validarEmail(email) {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    return regex.test(email)
}

console.log('Email v√°lido:', validarEmail('dan@email.com'))  // true
console.log('Email inv√°lido:', validarEmail('email-invalido'))  // false

// 2. Validar tel√©fono (formato: 555-123-4567)
function validarTelefono(tel) {
    const regex = /^\d{3}-\d{3}-\d{4}$/
    return regex.test(tel)
}

console.log('Tel√©fono v√°lido:', validarTelefono('555-123-4567'))  // true
console.log('Tel√©fono inv√°lido:', validarTelefono('1234567890'))  // false

// 3. Validar contrase√±a fuerte
// M√≠nimo 8 caracteres, 1 may√∫scula, 1 min√∫scula, 1 n√∫mero
function validarPassword(password) {
    const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/
    return regex.test(password)
}

console.log('Password fuerte:', validarPassword('Password123'))  // true
console.log('Password d√©bil:', validarPassword('password'))  // false

// 4. Validar URL
function validarURL(url) {
    const regex = /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b/
    return regex.test(url)
}

console.log('URL v√°lida:', validarURL('https://example.com'))  // true
console.log('URL inv√°lida:', validarURL('no-es-url'))  // false

// 5. Validar c√≥digo postal (5 d√≠gitos)
function validarCP(cp) {
    const regex = /^\d{5}$/
    return regex.test(cp)
}

console.log('CP v√°lido:', validarCP('12345'))  // true
console.log('CP inv√°lido:', validarCP('1234'))  // false

// 6. Validar nombre (solo letras y espacios)
function validarNombre(nombre) {
    const regex = /^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/
    return regex.test(nombre)
}

console.log('Nombre v√°lido:', validarNombre('Juan P√©rez'))  // true
console.log('Nombre inv√°lido:', validarNombre('Juan123'))  // false

console.log('');


// ============================================
// 12. EXTRAER INFORMACI√ìN
// ============================================

console.log('--- EXTRAER INFORMACI√ìN ---');

// Extraer todos los n√∫meros
const texto9 = 'Tengo 25 a√±os, peso 70 kg y mido 175 cm'
const numeros = texto9.match(/\d+/g)
console.log('N√∫meros:', numeros)  // ["25", "70", "175"]

// Extraer emails
const texto10 = 'Contactos: juan@email.com, maria@test.com'
const emails = texto10.match(/[\w.-]+@[\w.-]+\.\w+/g)
console.log('Emails:', emails)  // ["juan@email.com", "maria@test.com"]

// Extraer hashtags
const texto11 = 'Me gusta #JavaScript #CSS #HTML'
const hashtags = texto11.match(/#\w+/g)
console.log('Hashtags:', hashtags)  // ["#JavaScript", "#CSS", "#HTML"]

// Extraer menciones (@usuario)
const texto12 = 'Hola @dan y @maria'
const menciones = texto12.match(/@\w+/g)
console.log('Menciones:', menciones)  // ["@dan", "@maria"]

// Extraer URLs
const texto13 = 'Visita https://example.com y http://test.com'
const urls = texto13.match(/https?:\/\/[\w.-]+\.\w+/g)
console.log('URLs:', urls)  // ["https://example.com", "http://test.com"]

console.log('');


// ============================================
// 13. REEMPLAZAR TEXTO
// ============================================

console.log('--- REEMPLAZAR TEXTO ---');

// Reemplazo simple
const texto14 = 'Hola mundo, hola JavaScript'
console.log('Reemplazar primera:', texto14.replace(/hola/i, 'Adi√≥s'))
// "Adi√≥s mundo, hola JavaScript"

console.log('Reemplazar todas:', texto14.replace(/hola/gi, 'Adi√≥s'))
// "Adi√≥s mundo, Adi√≥s JavaScript"

// Reemplazo con funci√≥n
const texto15 = 'tengo 100 pesos y 50 d√≥lares'
const resultado3 = texto15.replace(/\d+/g, (numero) => {
    return parseInt(numero) * 2
})
console.log('Duplicar n√∫meros:', resultado3)
// "tengo 200 pesos y 100 d√≥lares"

// Usar grupos de captura en reemplazo
const fecha = '2025-10-21'
const fechaFormateada = fecha.replace(/(\d{4})-(\d{2})-(\d{2})/, '$3/$2/$1')
console.log('Fecha formateada:', fechaFormateada)  // "21/10/2025"

// Capitalizar palabras
const texto16 = 'hola mundo javascript'
const capitalizado = texto16.replace(/\b\w/g, (letra) => letra.toUpperCase())
console.log('Capitalizado:', capitalizado)  // "Hola Mundo Javascript"

console.log('');


// ============================================
// 14. EJEMPLO PR√ÅCTICO: VALIDADOR DE FORMULARIO
// ============================================

console.log('--- VALIDADOR DE FORMULARIO ---');

function validarFormulario(datos) {
    const errores = []

    // Validar nombre (solo letras y espacios)
    if (!/^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/.test(datos.nombre)) {
        errores.push('Nombre inv√°lido (solo letras)')
    }

    // Validar email
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(datos.email)) {
        errores.push('Email inv√°lido')
    }

    // Validar tel√©fono (10 d√≠gitos)
    if (!/^\d{10}$/.test(datos.telefono)) {
        errores.push('Tel√©fono inv√°lido (10 d√≠gitos)')
    }

    // Validar edad (n√∫mero entre 1-120)
    if (!/^(?:[1-9]|[1-9]\d|1[01]\d|120)$/.test(datos.edad)) {
        errores.push('Edad inv√°lida (1-120)')
    }

    // Validar contrase√±a (min 8, 1 may√∫scula, 1 n√∫mero)
    if (!/^(?=.*[A-Z])(?=.*\d).{8,}$/.test(datos.password)) {
        errores.push('Contrase√±a d√©bil (min 8 caracteres, 1 may√∫scula, 1 n√∫mero)')
    }

    return {
        valido: errores.length === 0,
        errores: errores
    }
}

// Probar validador
const formulario1 = {
    nombre: 'Juan P√©rez',
    email: 'juan@email.com',
    telefono: '5551234567',
    edad: '25',
    password: 'Password123'
}

const formulario2 = {
    nombre: 'Juan123',
    email: 'email-invalido',
    telefono: '123',
    edad: '200',
    password: 'pass'
}

console.log('Formulario v√°lido:', validarFormulario(formulario1))
// { valido: true, errores: [] }

console.log('Formulario inv√°lido:', validarFormulario(formulario2))
// { valido: false, errores: [...] }

console.log('');


// ============================================
// 15. TABLA DE REFERENCIA R√ÅPIDA
// ============================================

console.log('--- TABLA DE REFERENCIA ---');
console.log(`
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ PATR√ìN         ‚îÇ DESCRIPCI√ìN                          ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ .              ‚îÇ Cualquier caracter                   ‚îÇ
‚îÇ \\d             ‚îÇ D√≠gito (0-9)                         ‚îÇ
‚îÇ \\w             ‚îÇ Alfanum√©rico (a-z, A-Z, 0-9, _)      ‚îÇ
‚îÇ \\s             ‚îÇ Espacio en blanco                    ‚îÇ
‚îÇ [abc]          ‚îÇ a, b, o c                            ‚îÇ
‚îÇ [^abc]         ‚îÇ Cualquiera EXCEPTO a, b, c           ‚îÇ
‚îÇ [a-z]          ‚îÇ Rango de letras                      ‚îÇ
‚îÇ ^              ‚îÇ Inicio de string                     ‚îÇ
‚îÇ $              ‚îÇ Final de string                      ‚îÇ
‚îÇ *              ‚îÇ 0 o m√°s veces                        ‚îÇ
‚îÇ +              ‚îÇ 1 o m√°s veces                        ‚îÇ
‚îÇ ?              ‚îÇ 0 o 1 vez (opcional)                 ‚îÇ
‚îÇ {n}            ‚îÇ Exactamente n veces                  ‚îÇ
‚îÇ {n,m}          ‚îÇ Entre n y m veces                    ‚îÇ
‚îÇ (abc)          ‚îÇ Grupo de captura                     ‚îÇ
‚îÇ (?:abc)        ‚îÇ Grupo sin captura                    ‚îÇ
‚îÇ (a|b)          ‚îÇ a O b                                ‚îÇ
‚îÇ (?=...)        ‚îÇ Lookahead positivo                   ‚îÇ
‚îÇ (?!...)        ‚îÇ Lookahead negativo                   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

BANDERAS:
g - global
i - ignore case
m - multiline

M√âTODOS:
test()    ‚Üí true/false
exec()    ‚Üí informaci√≥n detallada
match()   ‚Üí array de coincidencias
search()  ‚Üí √≠ndice de coincidencia
replace() ‚Üí reemplazar texto
split()   ‚Üí dividir string
`);


// ============================================
// RESUMEN FINAL
// ============================================

console.log('--- RESUMEN FINAL ---');
console.log(`
üéØ EXPRESIONES REGULARES EN JAVASCRIPT:

1. CREAR:
   /patron/banderas  o  new RegExp('patron', 'banderas')

2. BANDERAS:
   g - global (todas las coincidencias)
   i - ignore case (may√∫sculas/min√∫sculas)
   m - multiline (por l√≠nea)

3. M√âTODOS:
   regex.test(str)      ‚Üí true/false
   regex.exec(str)      ‚Üí informaci√≥n detallada
   str.match(regex)     ‚Üí array de coincidencias
   str.replace(regex)   ‚Üí reemplazar
   str.split(regex)     ‚Üí dividir

4. CARACTERES ESPECIALES:
   \\d ‚Üí d√≠gito    \\w ‚Üí alfanum√©rico    \\s ‚Üí espacio
   .  ‚Üí cualquier  ^  ‚Üí inicio          $  ‚Üí final

5. CUANTIFICADORES:
   * ‚Üí 0 o m√°s    + ‚Üí 1 o m√°s    ? ‚Üí opcional
   {n} ‚Üí exactamente n    {n,m} ‚Üí entre n y m

6. GRUPOS:
   (abc) ‚Üí captura    (?:abc) ‚Üí sin captura    (a|b) ‚Üí alternancia

7. VALIDACIONES COMUNES:
   Email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/
   Tel√©fono: /^\\d{3}-\\d{3}-\\d{4}$/
   Password: /^(?=.*[A-Z])(?=.*\\d).{8,}$/

8. CASOS DE USO EN FRONT-END:
   ‚úÖ Validar formularios
   ‚úÖ Extraer informaci√≥n (emails, URLs, n√∫meros)
   ‚úÖ Formatear texto
   ‚úÖ Buscar y reemplazar

‚ö†Ô∏è IMPORTANTE:
   - Usa /i para ignorar may√∫sculas/min√∫sculas
   - Usa /g para encontrar todas las coincidencias
   - Escapa caracteres especiales con \\
   - Prueba tus regex en regex101.com
`);

console.log('\n‚úÖ Archivo de estudio creado correctamente');
console.log('üìö Consulta este archivo para entender RegEx en JavaScript');
console.log('üîç Practica en: https://regex101.com');
